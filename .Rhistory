fit_scorch(scorch_model)
fit_scorch = function(scorch_model,
loss=nn_mse_loss,
loss_params = list(reduction="mean"),
optim = optim_adam,
optim_params = list(lr=0.001),
num_epochs = 10,
verbose=TRUE){
## Need to update to pass model through
## you are working here
loss_fn = partial(loss,loss_params)()
optim_fn = partial(optim,scorch_model$nn_model$parameters,optim_params)()
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length(dataloader))} \n\n"))
}
}
return(scorch_model$nn_model)
}
})
fit_scorch = function(scorch_model,
loss=nn_mse_loss,
loss_params = list(reduction="mean"),
optim = optim_adam,
optim_params = list(lr=0.001),
num_epochs = 10,
verbose=TRUE){
## Need to update to pass model through
## you are working here
loss_fn = partial(loss,loss_params)()
optim_fn = partial(optim,scorch_model$nn_model$parameters,optim_params)()
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length(dataloader))} \n\n"))
}
}
return(scorch_model$nn_model)
}
fit_scorch(scorch_model)
loss_params =list(reduction="mean")
optim_params = list(lr=0.001)
loss_fn = partial(loss,loss_params)()
loss_fn = partial(nn_mse_loss,loss_params)()
optim_fn = partial(optim_adam,scorch_model$nn_model$parameters,optim_params)()
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length(dataloader))} \n\n"))
}
}
num_epochs = 10
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length(dataloader))} \n\n"))
}
}
optim_fn$zero_grad()
batch = scorch_model$dl$.iter()$.next()
batch
pred = scorch_model$nn_model(batch$input)
pred
loss = loss_fn(pred, batch$output)
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()
pred = scorch_model$nn_model(batch$input)
pred
loss = loss_fn(pred, batch$output)
loss
fit_scorch = function(scorch_model,
loss=nn_mse_loss,
loss_params = list(reduction="mean"),
optim = optim_adam,
optim_params = list(lr=0.001),
num_epochs = 10,
verbose=TRUE){
## Need to update to pass model through
## you are working here
loss_fn = partial(loss,loss_params)()
optim_fn = partial(optim,scorch_model$nn_model$parameters,optim_params)()
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length(dataloader))} \n\n"))
}
}
return(scorch_model$nn_model)
}
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
bach
batch
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
total_loss
fit_scorch = function(scorch_model,
loss=nn_mse_loss,
loss_params = list(reduction="mean"),
optim = optim_adam,
optim_params = list(lr=0.001),
num_epochs = 10,
verbose=TRUE){
## Need to update to pass model through
## you are working here
loss_fn = partial(loss,loss_params)()
optim_fn = partial(optim,scorch_model$nn_model$parameters,optim_params)()
length_dl = length(scorch_model$dl)
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
return(scorch_model$nn_model)
}
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
total_loss()
total_loss
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
print("here")
fit_scorch = function(scorch_model,
loss=nn_mse_loss,
loss_params = list(reduction="mean"),
optim = optim_adam,
optim_params = list(lr=0.001),
num_epochs = 10,
verbose=TRUE){
## Need to update to pass model through
## you are working here
loss_fn = partial(loss,loss_params)()
optim_fn = partial(optim,scorch_model$nn_model$parameters,optim_params)()
length_dl = length(scorch_model$dl)
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
print("here")
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
return(scorch_model$nn_model)
}
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
fit_scorch
load_all()
rm(fit_scorch)
fit_scorch
rm(list=ls())
fit_scorch
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
load_all()
fit_scorch
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch() |> fit_scorch()
scorch_model
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()
scorch_model
scorch_model$dl
num_epochs=10
loss_fn
loss_fn = partial(nn_mse_loss,list(reduction="mean"))()
optim_fn = partial(optim,scorch_model$nn_model$parameters,list(lr=0.001))()
loss_fn = partial(nn_mse_loss,list(reduction="mean"))()
optim_fn = partial(optim_adam,scorch_model$nn_model$parameters,list(lr=0.001))()
optim_fn
length_dl = length(scorch_model$dl)
length_dl
num_epochs
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
batch$input
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
optim_fn
loss_fn
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
batch = scorch_model$dl$.iter()$.next()
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)
loss
loss$backward()
optim_fn$step()
optim_fn = optim_adam(scorch_model$nn_model$parameters,lr=0.001)
optim_fn$step()
batch$input
batch$output
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
epoch
total_loss
length_dl
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
length_dl = length(scorch_model$dl)
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
#  loss$backward()
#  optim_fn$step()
# total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
# pred = scorch_model$nn_model(batch$input)
#  loss = loss_fn(pred, batch$output)  # assuming input x is your data
#  loss$backward()
#  optim_fn$step()
#  total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
batch in scorch_model$dl
coro::loop(for (batch in scorch_model$dl) {print(i)})
coro::loop(for (batch in scorch_model$dl) {i = i + 1; print(i)})
i = 1; coro::loop(for (batch in scorch_model$dl) {i = i + 1; print(i)})
scorch_model$dl
class(scorch_model$dl)
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()
scorch_model$dl
class(scorch_model$dl)
i = 1; coro::loop(for (batch in scorch_model$dl) {i = i + 1; print(i)})
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
verbose = TRUE
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()  |> fit_scorch()
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()  |> fit_scorch()
loss_fn = partial(nn_mse_loss,list(reduction="mean"))()
## Problem seems to be here in getting optimization function right
optim_fn = partial(optim,scorch_model$nn_model$parameters,list(lr=0.001))()
loss_fn = partial(nn_mse_loss,list(reduction="mean"))()
## Problem seems to be here in getting optimization function right
optim_fn = partial(optim_adam,scorch_model$nn_model$parameters,list(lr=0.001))()
optim_fn
length_dl = length(scorch_model$dl)
scorch_model
for (epoch in 1:num_epochs) {  # number of epochs
total_loss  = 0
coro::loop(for (batch in scorch_model$dl) {
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
total_loss = total_loss + loss$item()
})
if(verbose){
cat(glue::glue("Epoch {crayon::red(epoch)}, Loss: {crayon::red(total_loss/length_dl)} \n\n"))
}
}
total_loss  = 0
batch
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
optim_fn$step()
pred
loss
batch$output
pred
loss$backward()
optim_fn$zero_grad()
pred = scorch_model$nn_model(batch$input)
loss = loss_fn(pred, batch$output)  # assuming input x is your data
loss$backward()
optim_fn$step()
rm(list=ls())
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
scorch_model = dl |> initiate_scorch() |>
scorch_layer(nn_linear(11,5)) |>
scorch_layer(nn_linear(5,11)) |>
compile_scorch()  |> fit_scorch()
