ds
devtools::document()
devtools::document()
?usethis::use_package()
usethis::use_package("torch","suggests")
requireNamespace("torch", quietly = TRUE)
dl = matrix
dl = matrix(1:10,nrow=)
dl = matrix(1:10,nrow=2)
dl
create_scorch_dataloader_class = function(dl) {
structure(dl, class = "scorch_dataloader")
}
create_scorch_dataloader_class(dl)
library(devtools)
load_all()
input = mtcars;
output = mtcars; dl = create_dataloader(input,output)
input = mtcars |> as.matrix();
output = mtcars |> as.matrix(); dl = create_dataloader(input,output)
class(dl)
dl
rm(dl)
input = mtcars |> as.matrix();
output = mtcars |> as.matrix(); dl = create_dataloader(input,output)
dl
dl()
dl
## Check input arguments
stopifnot("`input` must be a matrix" = is.matrix(input))
stopifnot("`output` must be a matrix" = is.matrix(output))
if(!is.null(aux)){
stopifnot("`aux` must be a matrix" = is.matrix(aux))
}
create_dataset = torch::dataset(
name = name,
initialize = function(input,output,aux){
self$input = input |> torch::torch_tensor()
self$output = output |> torch::torch_tensor()
self$aux = aux
if(!is.null(aux)){
self$aux = aux |> torch::torch_tensor()
}
},
.getitem = function(index){
if(is.null(self$aux)){
list(input = self$input[index,],output=self$output[index,])
}else{
list(input = self$input[index,],output=self$output[index,],aux=self$aux[index,])
}
},
.length = function(){
self$input$shape[1]
})
name = "dl"
create_dataset = torch::dataset(
name = name,
initialize = function(input,output,aux){
self$input = input |> torch::torch_tensor()
self$output = output |> torch::torch_tensor()
self$aux = aux
if(!is.null(aux)){
self$aux = aux |> torch::torch_tensor()
}
},
.getitem = function(index){
if(is.null(self$aux)){
list(input = self$input[index,],output=self$output[index,])
}else{
list(input = self$input[index,],output=self$output[index,],aux=self$aux[index,])
}
},
.length = function(){
self$input$shape[1]
})
## Create dataset
ds = create_dataset(input,output,aux)
ds
dl = torch::dataloader(ds,batch_size=batch_size,shuffle=shuffle)
shuffle=TRUE
dl = torch::dataloader(ds,batch_size=batch_size,shuffle=shuffle)
batch_size = 32
dl = torch::dataloader(ds,batch_size=batch_size,shuffle=shuffle)
dl
class(dl)
dl = create_scorch_dataloader_class(dl)
dl
names(dl)
dl$.iter()
class(dl)
input = mtcars |> as.matrix();
output = mtcars |> as.matrix(); dl = create_dataloader(input,output)
dl$.iter()
names(dl)
dl$.iter()
dl$.iter(1)
dl$.iter()
dl$.iter()$.next()
head(dl$.iter()$.next()$input)
?head
head.scorch_dataloader = function(dl,...){
cat("Head of input:")
print(head(dl$.iter()$.next()$input,...))
}
head(dl)
cat("Head of input:\n\n")
print(head(dl$.iter()$.next()$input,...))
head.scorch_dataloader = function(dl,...){
cat("Head of input:\n\n")
print(head(dl$.iter()$.next()$input,...))
}
head(dl)
install.packages("crayon")
install.packages("crayon")
head.scorch_dataloader = function(dl,...){
cat(crayon::blue("Head of input:\n\n"))
print(head(dl$.iter()$.next()$input,...))
}
head(dl)
dl
head(dl$.iter()$.next()$input)
dl$.iter()
load_all()
library(devtools)
usethis::use_package("crayon","suggests")
load_all()
input = mtcars |> as.matrix();
output = mtcars |> as.matrix(); dl = create_dataloader(input,output)
dl
print(dl)
head(dl)
head.scorch_dataloader = function(dl,...){
cat(crayon::blue("Head of input:\n\n"))
print(head(dl$.iter()$.next()$input,...))
cat("/n/n")
cat(crayon::blue("Head of output:\n\n"))
print(head(dl$.iter()$.next()$output,...))
cat("/n/n")
if(!is.null(dl$.iter()$.next()$aux)){
cat(crayon::blue("Head of aux:\n\n"))
print(head(dl$.iter()$.next()$aux,...))
}
}
head(dl)
head.scorch_dataloader = function(dl,...){
cat(crayon::blue("Head of input:\n\n"))
print(head(dl$.iter()$.next()$input,...))
cat("\n\n")
cat(crayon::blue("Head of output:\n\n"))
print(head(dl$.iter()$.next()$output,...))
cat("\n\n")
if(!is.null(dl$.iter()$.next()$aux)){
cat(crayon::blue("Head of aux:\n\n"))
print(head(dl$.iter()$.next()$aux,...))
}
}
head(dl)
dl$.iter()$.next()$aux
dl$.iter()$.next()$output
print.scorch_dataloader = function(dl){
cat("This is a dataloader object")
}
dl
dl$batch_size
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0("\t * Batch size:",
crayon::red(dl$batch_size)))
}
dl
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0(". * Batch size:",
crayon::red(dl$batch_size)))
}
dl
dl$.length
dl$.length()
dim(mtcars)
dl = create_dataloader(input,output,batch_size=2)
dl$.length()
names(dl)
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0(" * Batch size:",
crayon::red(dl$batch_size)))
cat(paste0(" * Number of batches:",
crayon::red(dl$.length())))
}
dl
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0(" * Batch size:",
crayon::red(dl$batch_size)))
cat("\n")
cat(paste0(" * Number of batches:",
crayon::red(dl$.length())))
}
dl
devtools::document()
usethis::use_r("dlv")
cat("\n")
cat(paste0(" * Number of batches: ",
crayon::red(dl$.length())))
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0(" * Batch size: ",
crayon::red(dl$batch_size)))
cat("\n")
cat(paste0(" * Number of batches: ",
crayon::red(dl$.length())))
cat("\n")
cat(paste0(" * Dimension of input vectors: ",
crayon::red(dl$.iter()$.next()$input$shape[1])))
}
dl
print.scorch_dataloader = function(dl){
cat("This is a dataloader object with features:\n")
cat(paste0(" * Batch size: ",
crayon::red(dl$batch_size)))
cat("\n")
cat(paste0(" * Number of batches: ",
crayon::red(dl$.length())))
cat("\n")
cat(paste0(" * Dimension of input vectors: ",
crayon::red(dl$.iter()$.next()$input$shape[2])))
cat("\n")
cat(paste0(" * Dimension of output vectors: ",
crayon::red(dl$.iter()$.next()$output$shape[2])))
if(!is.null(dl$.iter()$.next()$aux)){
cat("\n")
cat(paste0(" * Dimension of aux vectors: ",
crayon::red(dl$.iter()$.next()$aux$shape[2])))
}
}
dl
usethis::use_r("scorch_layer")
class(torch::nn_linear())
class(torch::nn_linear
)
class(torch::nn_multihead_attention())
class(torch::nn_multihead_attentio
class(torch::nn_multihead_attention)
is.nn_module_genator(torch::nn_multihead_attention)
is.nn_module_generator(torch::nn_multihead_attention)
args(stopifnot)
?stopifnot
stopifnot("m must be symmetric"= m == t(m)) |> try()
m[1,2] = 12
scorch_layer = function(scorch_model,nn_layer){
stopifnot("`input` must be a nn_module_generator" = class(nn_layer) = "nn_module_generator")
scorch_layer = function(scorch_model,nn_layer){
stopifnot("`input` must be a nn_module_generator" = class(nn_layer) == "nn_module_generator")
}
scorch_layer(dl,nn_module_generator)
scorch_layer(dl,nn_linear)
torch::nn_linear()
scorch_layer(dl,torch::nn_linear)
class(torch::nn_linear)
scorch_layer = function(scorch_model,nn_layer){
return(class(nn_layer))
#stopifnot("`input` must be a nn_module_generator" = class(nn_layer) == "nn_module_generator")
}
class(torch::nn_linear)
scorch_layer(dl,torch::nn_linear)
"nn_module_generator" %in% class(nn_linear)
"nn_module_generator" %in% class(torch::nn_linear)
scorch_layer = function(scorch_model,nn_layer){
return(class(nn_layer))
stopifnot("`input` must be a nn_module_generator" = "nn_module_generator" %in% class(nn_layer))
}
scorch_layer(dl,torch::nn_linear)
?nn_linear
scorch_layer = function(scorch_model,nn_layer,...){
stopifnot("`nn_layer` must be a nn_module_generator (a nn layer type from torch)" = "nn_module_generator" %in% class(nn_layer))
args_list = list(...)
return(args_list)
#next_layer = c(nn_layer,layer_args)
#scorch_model = cbind(scorch_model,next_layer)
}
scorch_layer(dl,torch::nn_linear,a=2,b=3,c=4)
paste0(list(a=3,b=3,c=3))
paste0(cat(a=3,b=3,c=3))
dl
usethis::use_r("dlv")
library(torch)
nnobj = nn_multihead_attention(10,5)
nnobj
args(nnobj)
dl
dl$.iter()$.next()$input
dlv = function(dl){
return(list(dl=scorch_dl,input_var="input"))
}
dlv(dl)
dlv = function(dl){
return(list(dl=dl,input_var="input"))
}
dlv(dl)
?nn_conv1d
nnobj = nn_conv1d()
nnobj = nn_conv1d(100,5,100)
nnobj
args(nnobj)
?nn_multihead_attention
nnobj = nn_multihead_attention(100,5)
nnobj
args(nnobj)
input = torch_rand(100)
nnobj(input,input,input)
args(nnobj)
nnobj = nn_multihead_attention(100,1)
nnobj(input,input,input)
nnobj(input,input)
nnobj(input)
nnobj(torch_unsqueeze(input),torch_unsqueeze(input),torch_unsqueeze(input))
args(nnobj)
nnobj
nnobj = nn_multihead_attention(100,1)
nnobj
nnobj = nn_linear(100,3)
nnobj
args(nnobj)
dlv = function(dl,...){
l = list(dl=dl,input_var=list(...))
create_scorch_model_class(l)
}
create_scorch_model_class = function(obj) {
structure(obj, class = "scorch_model")
}
dlv(dl)
dlv(dl,"input")
dlv = function(dl,...){
l = list(dl=dl,dl_var=list(...))
create_scorch_model_class(l)
}
create_scorch_model_class = function(obj) {
structure(obj, class = "scorch_model")
}
dlv(dl,input="input")
dlv(dl,"input")
dlv = function(dl,...){
l = list(dl=dl,
dl_var=list(...),
scorch_model=list())
create_scorch_model_class(l)
}
create_scorch_model_class = function(obj) {
structure(obj, class = "scorch_model")
}
dlv()
dlv(dl,"input")
testfunc = function(...){return(length(list(...)))}
testfunc()
testfunc(3,4)
testfunc = function(...){list(...))}
testfunc = function(...){list(...)}
testfunc(x=3,y=4)
testfunc(input="input")
scorch_layer = function(scorch_model,nn_obj,...){
#  stopifnot("`nn_layer` must be a nn_module_generator (a nn layer type from torch)" = "nn_module_generator" %in% class(nn_layer))
l = list(...)
scorch_model$scorch_architecture = c(scorch_model$scorch_architecture,list(nn_obj,l))
scorch_model
}
dlv = function(dl,...){
l = list(dl=dl,
dl_var=list(...),
scorch_architecture=list())
create_scorch_model_class(l)
}
create_scorch_model_class = function(obj) {
structure(obj, class = "scorch_model")
}
dl
dl |> dlv("input","output")
dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5))
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5))
tmp$scorch_architecture
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5)) |> scorch_layer(nn_linear(5,3))
tmp
tmp$scorch_architecture
scorch_layer = function(scorch_model,nn_obj,...){
#  stopifnot("`nn_layer` must be a nn_module_generator (a nn layer type from torch)" = "nn_module_generator" %in% class(nn_layer))
l = list(...)
scorch_model$scorch_architecture = list(scorch_model$scorch_architecture,list(nn_obj,l))
scorch_model
}
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5)) |> scorch_layer(nn_linear(5,3))
tmp$scorch_architecture
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5)) |> scorch_layer(nn_linear(5,3),input="input")
tmp
scorch_layer = function(scorch_model,nn_obj,...){
#  stopifnot("`nn_layer` must be a nn_module_generator (a nn layer type from torch)" = "nn_module_generator" %in% class(nn_layer))
l = list(...)
scorch_model$scorch_architecture = c(scorch_model$scorch_architecture,list(nn_obj,l))
scorch_model
}
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5)) |> scorch_layer(nn_linear(5,3),input="input")
tmp
tmp$scorch_architecture
scorch_layer = function(scorch_model,nn_obj,...){
#  stopifnot("`nn_layer` must be a nn_module_generator (a nn layer type from torch)" = "nn_module_generator" %in% class(nn_layer))
l = list(...)
scorch_model$scorch_architecture = append(scorch_model$scorch_architecture,list(nn_obj,l))
scorch_model
}
tmp = dl |> dlv("input","output") |> scorch_layer(nn_linear(11,5)) |> scorch_layer(nn_linear(5,3),input="input")
tmp
tmp$scorch_architecture
library(devtools)
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
dl |> initiate_scorch_model()
load_all()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
dl |> initiate_scorch_model()
#' Initiate a scorch model
#'
#' @param dl An input data loader, created with create_dataloader
#'
#' @return A scorch model object
#'
#' @export
#'
#' @examples
#'
#' input = mtcars |> as.matrix()
#' output = mtcars |> as.matrix()
#' dl = create_dataloader(input,output,batch_size=2)
#' dl |> initiate_scorch_model()
initiate_scorch_model = function(dl){
l = list(dl=dl,
scorch_architecture=list())
create_scorch_model_class(l)
}
create_scorch_model_class = function(obj) {
structure(obj, class = "scorch_model")
}
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
dl |> initiate_scorch_model()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
dl |> initiate_scorch_model()
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model()
sm
names(sm)
print.scorch_model = function(scorch_model){
cat("This is a scorch model which has a dataloader:\n")
dl
}
sm
print.scorch_model = function(scorch_model){
cat("This is a scorch model which has a dataloader:\n")
print(dl)
}
sm
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input)
library(torch)
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input)
sm
sm$scorch_architecture
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input=input)
sm
sm
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input="input")
sm
sm$scorch_architecture
length(sm$scorch_architecture)
sm$scorch_architecture[[1]]
sm$scorch_architecture[[2]]
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input="input")
sm
sm$scorch_architecture
input = mtcars |> as.matrix()
output = mtcars |> as.matrix()
dl = create_dataloader(input,output,batch_size=2)
sm = dl |> initiate_scorch_model() |> scorch_layer(nn_linear(11,5),input="input") |> scorch_layer(nn_linear(11,5),input="input")
sm
sm$scorch_architecture
class(sm$scorch_architecture[[1]])
n_layer = length(sm$scorch_architecture)/2
n_layer
args(sm$scorch_architecture)
args(sm$scorch_architecture[[1]])
args(sm$scorch_architecture[[2]])
args(sm$scorch_architecture[[3]])
